#!/usr/bin/env bash
# FOSSology fo-installdeps script
# SPDX-FileCopyrightText: Â© 2008-2014 Hewlett-Packard Development Company, L.P.

# SPDX-License-Identifier: GPL-2.0-only
#
# This script helps you install build and runtime dependencies on a system.
# It is NOT indented to replace package dependencies, it's just a tool to
# make testing the "upstream" build and install process. If you determine
# this script isn't installing something you think it should, consult
# the packaging metadata for the system in question as that is the
# canonical location for such info, then fix it there first and also
# update this file and the INSTALL document.

# Installing Package Manager for different Enviornment  
required_utils=("dos2unix")

for util in "${required_utils[@]}"; do
    if ! command -v $util &> /dev/null; then
        echo "$util is not installed. Attempting to install..."
        if [[ $EUID -ne 0 ]]; then
            echo "Unable to install $util Aborting..."
            exit 1
        else
            case $DISTRO in
                Linux)
                    # Detecting Package Manager based on Enviornment
                    if command -v apt-get &> /dev/null; then
                        sudo apt-get install -y $util
                    elif command -v yum &> /dev/null; then
                        sudo yum install -y $util
                    elif command -v dnf &> /dev/null; then
                        sudo dnf install -y $util
                    elif command -v pacman &> /dev/null; then
                        sudo pacman -S --noconfirm $util
                    else
                        echo "No compatible package manager found. Aborting..."
                        exit 1
                    fi
                    ;;
                Darwin)
                    if command -v brew &> /dev/null; then
                        brew install $util
                    else
                        echo "Homebrew is not installed. Please install Homebrew to proceed."
                        exit 1
                    fi
                    ;;
                *)
                    echo "Unsupported OS."
                    exit 1
                    ;;
            esac
        fi
    fi
done

# Line Encoding
find . -type f -print0 | parallel -0 'grep -Iql $'\r'' {} && dos2unix {}'

show_help() {
  cat <<EOF
Usage: fo-installdeps [options]
  -r or --runtime    : install runtime dependencies
  -b or --buildtime  : install buildtime dependencies
  -e or --everything : install all dependencies (default)
  -o or --offline : do not run composer installation
  -y                 : Automatic yes to prompts
  -h or --help       : this help text
EOF
}

source "$(dirname ${BASH_SOURCE[0]})/utils.sh"

#
# Don't show the -y option.  Should only be used for install testing, as using
# it without being careful can destroy your system.
#
YesOpt=''

#Default should be installation with internet connection
OFFLINE=''
EVERYTHING=''
RUNTIME=''
BUILDTIME=''

## Options parsing and setup
# parse options
OPTS=$(getopt -o rbeohy --long runtime,buildtime,everything,offline,help -n 'fo-installdeps' -- "$@")

if [[ $? -ne 0 ]]; then
   OPTS="--help"
fi

eval set -- "$OPTS"

# if no options or just -y then do everything
if [[ $OPTS == ' --' || $OPTS == ' -y --' ]]; then
  EVERYTHING=true
fi

while true; do
   case "$1" in
      -r|--runtime)     RUNTIME=true; shift;;
      -b|--buildtime)   BUILDTIME=true; shift;;
      -e|--everything)  EVERYTHING=true; shift;;
      -o|--offline)     OFFLINE=true; shift;;
      -y)               YesOpt='-y'; shift;;
      -h|--help)        show_help; exit;;
      --)               shift; break;;
      *)                echo "ERROR: option $1 not recognised"; exit 1;;
   esac
done

set -o errexit -o nounset -o pipefail

must_run_as_root
need_lsb_release

if [[ $EVERYTHING ]]; then
   echo "*** Installing both runtime and buildtime dependencies ***"
   RUNTIME=true
   BUILDTIME=true
fi

# figure out what distro we're on
DISTRO=$(uname -s || lsb_release --id --short)
CODENAME=$(sw_vers -productVersion 2>/dev/null || lsb_release --codename --short 2>/dev/null)
ARCH=$(uname -m) 

########################################################################

echo "install core dependencies"

if [[ $BUILDTIME ]]; then
    case "$DISTRO" in
        Darwin)
            echo "*** Installing buildtime dependencies for macOS ***"
            brew install curl libxml2 icu4c cmake ninja boost postgresql composer
            brew install mxml cunit libmagic glib libpq cppunit
            brew install php

            if ! brew list | grep -q postgresql; then
                brew install postgresql
            fi
            ;;
       Debian|Ubuntu)
            echo "*** Installing buildtime dependencies for Linux $DISTRO ***"
            apt-get $YesOpt install \
             libmxml-dev curl libxml2-dev libcunit1-dev libicu-dev \
             build-essential libtext-template-perl subversion rpm librpm-dev \
             libmagic-dev libglib2.0 libboost-regex-dev libzstd-dev \
             libboost-program-options-dev libpq-dev composer patch devscripts \
             libdistro-info-perl libcppunit-dev libomp-dev cmake ninja-build
            ;;
         RedHatEnterprise*|CentOS|Fedora)
         echo "*** Installing buildtime dependencies for Linux $DISTRO ***"
            yum $YesOpt install \
              libmxml-dev curl libxml2-dev libcunit1-dev libicu-dev \
              build-essential libtext-template-perl subversion rpm librpm-dev \
              libmagic-dev libglib2.0 libboost-regex-dev libzstd-dev \
              libboost-program-options-dev libpq-dev composer patch devscripts \
              libdistro-info-perl libcppunit-dev libomp-dev cmake ninja-build
            ;;
          *)
            echo "ERROR: Unsupported operating system $DISTRO. Exiting installation."
            exit 1
            ;;
    esac
fi

########################################################################
options=''
if [[ $BUILDTIME ]]; then
  options="$options -b"
fi

if [[ $RUNTIME ]]; then
  options="$options -r"
fi

if [[ $YesOpt ]]; then
  options="$options -y"
fi
mods_dir="$(dirname "$0")/../src/" ## get the directory where fo-installdeps resides

find "$mods_dir" -type f -name mod_deps -execdir bash -cv "{} $options" \;

########################################################################
